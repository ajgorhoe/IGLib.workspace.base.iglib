// Copyright (c) Igor Grešovnik (2009), IGLib license; http://www2.arnes.si/~ljc3m2/igor/ioptlib/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace IG.Lib
{

    /// <summary>Classes whose instances have unique integer IDs.</summary>
    public interface IIdentifiable
    {
        /// <summary>Returns unique ID (in the scope of a given type) of the current object.</summary>
        int Id { get; }
    }

    /// <summary>Objects of this type have a unique ID (unique for all objects of a given type)
    /// and can be registered in the register of existent objects of the specified type.
    /// Implementation notes: 
    /// Registerable.Example contains an example of how to do that, or can even be inherited
    /// to provide all functionality automatically (but this may not be feasible because multiple 
    /// inheritance is not supported, and our class already inherits form another one).</summary>
    public interface IRegisterable<T>: IIdentifiable 
            where T: class, IIdentifiable
    {

        /// <summary>Gets the object register where the current object can be registered.</summary>
        ObjectRegister<T> ObjectRegister { get; }

        /// <summary>Registers the current object.
        /// Subsequent calls (after the first one) have no effect.</summary>
        void Register();

        /// <summary>Returns true if the current object is registered, false if not.</summary>
        /// <returns></returns>
        bool IsRegistered();

        /// <summary>Unregisters the current object if it is currently registered. 
        /// Can be performed several times, in this case only the first call may have effect.</summary>
        void Unregister();
        
    }  // interface IRegisterable<T>


    /// <summary>Utility class for generaton of unique IDs for objects of specific type.
    /// IDs generated by calls of GetNewId() from a specific object of this class are unique.
    /// Utilizes definition of IIdentifiable interface.
    /// Implementation notes:
    /// In every class whose instances should have unique IDs, instantiate a private static object of this type,
    /// and an instance member of the Proxy subtype of this class. Both objexts should be instantiated by
    /// appropriate initializers, and constructor of the proxy object should be called with static object
    /// as argument.
    /// Example implementation can be found in the ExampleInterfaceImplementation subclass
    /// of this class.</summary>
    public class IdGenerator : ILockable
    {


        #region Construction

        /// <summary>Creates a new ID generator. The first ID generated will be 0.
        /// Subsequent IDs are generated by obtained by incrementing the last generated ID.</summary>
        public IdGenerator() { }

        /// <summary>Created a new ID generator with the specified ID generated first. 
        /// Subsequent IDs are generated by obtained by incrementing the last generated ID.</summary>
        /// <param name="firstId">The first ID generated by the current object.</param>
        public IdGenerator(int firstId)
        { _currentId = firstId; }

        #endregion Construction

        #region ThreadLocking

        private object _mainLock = new object();

        /// <summary>This object's central lock object to be used by other object.
        /// Do not use this object for locking in class' methods, for this you should use 
        /// InternalLock.</summary>
        public object Lock { get { return _mainLock; } }

        #endregion ThreadLocking


        private int _currentId = 0;

        private object _lockId = new object();

        /// <summary>Returns a new unique command ID 
        /// (process-unique over all objects of this type and its subtypes).</summary>
        public int GetNewId()
        { lock (_lockId) { int ret = _currentId; ++_currentId; return ret; } }

    } // class IdGenerator



    /// <summary>Proxy class that stores the object's unique ID (generated by a static instance
    /// of the IdGenerator class) and provides functionality of IIdentifiable.</summary>
    public class IdProxy : IIdentifiable
    {
        private IdProxy() { }

        /// <summary>Creates a new ID holder, with ID automatically generated by the specified
        /// ID generator. ID generator should be a static non-null class (e.g. initialized by
        /// initializer).</summary>
        /// <param name="generator"></param>
        public IdProxy(IdGenerator generator)
        {
            if (generator == null)
                throw new ArgumentNullException("ID generator not specified in constructor.");
            _id = generator.GetNewId();
        }

        protected int _id;


        /// <summary>Gets unique ID of the current interpreter.
        /// Command Id is unique across all objects of this type and derived types.</summary>
        public int Id
        {
            get { return _id; }
        }

        /// <summary>Assigns ID to this object that is process-unique across all object of this type
        /// and its derived types.</summary>
        public void AssignId()
        {
            // does nothig, ID already assigned.
        }
    }


    /// <summary>Provides implementation of register of objects of the specified type.
    /// Also generates unique IDs for objects of this type.
    /// This class utilizes implementation of IIdentifiable and IRegisterable interfaces.
    /// Implementation notes for IRegistable:
    /// For implementation, use a static instance of this class, and an a nonstatic instance of 
    /// the IdProcy class (to generate and hold object's unique ID). subclass of this clas, 
    /// initialized by that static instance.
    /// Example implementation can be found in the ExampleInterfaceImplementation subclass of this class.</summary>
    public class ObjectRegister<T> :
                                IdGenerator, ILockable
                    where T : class, IIdentifiable  // TODO: check if T must really be IRegistrable!
    {

        /// <summary>Creates an object that generates unique IDs (in the scope of the current instance) 
        /// and provides registration of objects of the given type.</summary>
        public ObjectRegister()
            : base()
        { }

        /// <summary>Creates an object that generates unique IDs (in the scope of the current instance) 
        /// with the specified first ID generated, and provides registration of objects of the given type.</summary>
        /// <param name="startId">The first ID that will be generated with this object's GetNewId() method.</param>
        public ObjectRegister(int startId)
            : base(startId)
        { }

        protected SortedDictionary<int, T> _register = new SortedDictionary<int, T>();

        protected object _internalLock = new object();


        /// <summary>Registers the specified object with the specified key (ID).
        /// Warning: this method does not check whether the specified key actually corresponds to
        /// object's ID that is obtained by the object's IIdentifiable.Id property. Therefore it is private.</summary>
        /// <param name="id"></param>
        /// <param name="obj"></param>
        private void Register(int id, T obj)
        {
            lock (_internalLock)
            {
                if (obj != null)
                    if (!IsRegistered(id))
                        _register.Add(id, obj);
            }
        }

        /// <summary>Adds the specified object to the register, using its Id property.
        /// If the object is already registered (i.e. the register already contains its Id)
        /// then </summary>
        public void Register(T obj)
        {
            lock (_internalLock)
            {
                if (obj != null)
                    Register(obj.Id, obj);
            }
        }


        /// <summary>Returns true if object with the specified ID is already registered with the current object,
        /// false otherwise.</summary>
        /// <param name="id">IIdentifiable object's ID, obtained by its ID property.</param>
        public bool IsRegistered(int id)
        {
            lock (_internalLock) { return _register.ContainsKey(id); }
        }


        /// <summary>Returns true if the specified object is registered with the current object, false otherwise.</summary>
        public bool IsRegistered(T obj)
        {
            lock (_internalLock)
            {
                if (obj != null)
                    return _register.ContainsKey(obj.Id);
                else
                    return false;
            }
        }

        /// <summary>Returns object that is registered with this object with the specified id, or null
        /// if such an object is not registered.</summary>
        public T GetRegisteredInstance(int id)
        {
            lock (_internalLock)
            {
                if (IsRegistered(id))
                    return _register[id];
                else return null;
            }
        }

        /// <summary>Unregisters object with the specified ID.
        /// WARNING:
        /// This method should only be used in finalization methods of objects that implement the 
        /// IRegisterable interface.</summary>
        /// <param name="id"></param>
        /// <returns>Reference of the object that has been</returns>
        public void Unregister(int id)
        {
            lock (_internalLock)
            {
                if (IsRegistered(id))
                    _register.Remove(id);
            }
        }

    }  // class Registerable


   

    /// <summary>Contains examples od implementation of the IIdentifieble and IRegistrable interface.
    /// They utilize implementation of helper classes from this file..</summary>
    public class RegisterableExamples 
    {


        /// <summary>Example implementation of IIdentifiable interface.</summary>
        class ExampleIIdentifiable : IIdentifiable
        {
            public ExampleIIdentifiable(string str)
            { _msg = str; }
            protected string _msg;

            #region IIdentifiableImplementation

            /// <summary>Static object that generates IDs for this class:</summary>
            private static IdGenerator _idGenerator = new IdGenerator(1 /* first ID */);

            /// <summary>Proxy object that implements the IIdentifiable interface for this object.</summary>
            private IIdentifiable _idProxy = new IdProxy(_idGenerator);
            
            /// <summary>Returns unique Id (in the scope of a given type) of the current object.
            /// Method is defined as virtual so that derived class can have its own IDs by defining its
            /// own static Identifiable.Generator object.</summary>
            public virtual int Id { get { return _idProxy.Id; } }

            #endregion IIdentifiableImplementation

            public override string ToString()
            {
                return("Object ID: " + Id + ", Message: " + _msg );
            }
        } // class ExampleIIdentifiable

        /// <summary>Example use of the IdGenerator class and its Proxy subclass to implement
        /// the IIdentifiable interface.</summary>
        public static void ExampleIdGenerator()
        {
            // Creation of array of IIdentifiable objects: 
            // List<ExampleIIdentifiable> objects = new List<ExampleIIdentifiable>();
            ExampleIIdentifiable[] objects = new ExampleIIdentifiable[] 
            { 
                new ExampleIIdentifiable("This is the first message."),
                new ExampleIIdentifiable("This is the second message."),
                new ExampleIIdentifiable("This is the third message."),
                new ExampleIIdentifiable("This is the fourth message.") 
            };
            Console.WriteLine("List of generated objects: ");
            Console.WriteLine(Util.CollectionToString(objects, true /* addNewlines */, 2 /* numIndent */ ));
            Console.WriteLine();
        }



        /// <summary>Example implementation of IIdentifiable interface.</summary>
        class ExampleIRegistrable : IRegisterable<ExampleIRegistrable>
        {
            public ExampleIRegistrable(string str)
            {
                _msg = str;
                ExampleIRegistrable a = this;
                Register();
            }
            protected string _msg;


            #region IRegistrableImplementation
            // Comment: this includes IIdrntifiable implementation, for which _idProxy is used in addition.

            /// <summary>Static object that providees object register and generates IDs 
            /// for this class:</summary>
            private static ObjectRegister<ExampleIRegistrable> _register =
                new ObjectRegister<ExampleIRegistrable>(1 /* first ID */);

            /// <summary>Proxy object that implements the IIdentifiable interface for this object.</summary>
            private IdProxy _idPproxy =
                new IdProxy(_register);

            /// <summary>Returns unique Id (in the scope of a given type) of the current object.
            /// Method is defined as virtual so that derived class can have its own IDs by defining its
            /// own static IdentifiableGenerator object.</summary>
            public virtual int Id { get { return _idPproxy.Id; } }

            /// <summary>Gets object register where the current object is registered.</summary>
            public ObjectRegister<ExampleIRegistrable> ObjectRegister
            { get { return _register; } }

            /// <summary>Registers the current object.
            /// Subsequent calls (after the first one) have no effect.</summary>
            public void Register()
            { _register.Register(this); }

            /// <summary>Returns true if the current object is registered, false if not.</summary>
            /// <returns></returns>
            public bool IsRegistered()
            { return _register.IsRegistered(this); }

            /// <summary>Unregisters the current object if it is currently registered. 
            /// Can be performed several times, in this case only the first call may have effect.</summary>
            public void Unregister()
            { _register.Unregister(this.Id); }

            #endregion IRegistrableImplementation


            public override string ToString()
            {
                string ret = "Object ID: " + Id + ", Message: " + _msg;
                if (IsRegistered())
                    ret += "; registered.";
                else ret += "; NOT registered.";
                return (ret);
            }
        } // class ExampleIRegistrable

        /// <summary>Example use of the IdGenerator class and its Proxy subclass to implement
        /// the IIdentifiable interface.</summary>
        public static void ExampleRegistrable()
        {
            // Creation of array of IIdentifiable objects: 
            // List<ExampleIIdentifiable> objects = new List<ExampleIIdentifiable>();
            ExampleIRegistrable[] objects = new ExampleIRegistrable[] 
            { 
                new ExampleIRegistrable("This is the first message."),
                new ExampleIRegistrable("This is the second message."),
                new ExampleIRegistrable("This is the third message."),
                new ExampleIRegistrable("This is the fourth message.") 
            };
            objects[1].Unregister();
            Console.WriteLine();
            Console.WriteLine("Test of imlementation of IRegistrable and IIdentifiable interfaces:");
            Console.WriteLine("List of generated objects: ");
            Console.WriteLine(Util.CollectionToString(objects, true /* addNewlines */, 2 /* numIndent */ ));
            int id = 3;
            ExampleIRegistrable obj = objects[1].ObjectRegister.GetRegisteredInstance(id);
            Console.WriteLine("Obtaining object with ID = " + id + " from the register: ");
            if (obj == null)
                Console.WriteLine("Object with this ID was not found.");
            else
            {
                Console.WriteLine("The following object is registered with this ID: ");
                Console.WriteLine(obj.ToString());
            }
            Console.WriteLine();
        }


    }  // class Registrable



}