using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using System.IO;
using System.IO.Pipes;
using System.Threading;


namespace IG.Lib
{
    
    /* See:
     * http://stackoverflow.com/questions/1309062/bidirectional-named-pipe-question
     * http://msdn.microsoft.com/en-us/library/bb546085%28v=vs.110%29.aspx
     */



    

    /// <summary>Server that creates a named pipe, listens on its input stream, and sends responses
    /// to the client.</summary>
    /// $A Igor Mar14;
    public class NamedPipeServerBase : ILockable
    {


        /// <summary>Provides an answer string to the specified request string.</summary>
        /// <param name="request">Request string.</param>
        /// <returns>Answer to the request.</returns>
        public delegate string ResponseDelegate(string request);


        #region Data.General

        private static object _lockGlobal = null;

        /// <summary>Static lock object used by all instances of this class (and possibly by other classes).</summary>
        public static object LockGlobal { 
            get {  
                 if (_lockGlobal == null)
                 {
                     lock(Util.LockGlobal)
                     {
                         if (_lockGlobal == null)
                             _lockGlobal = new object();
                     }
                 }
                return _lockGlobal;
            } 
        }

        
        protected object _lock = new object();

        /// <summary>Objectt for locking the current object.</summary>
        public object Lock { get { return _lock; } }


        private static int _defatultOutputLevel = 1;

        /// <summary>Default level of output for this kind of class.</summary>
        public static int DefaultOutputLevel
        {
            get { lock (LockGlobal) return _defatultOutputLevel; }
            set { lock (LockGlobal) { _defatultOutputLevel = value; } }
        }

        private int _otputLevel = DefaultOutputLevel;

        /// <summary>Level of output generated by operatins.</summary>
        public int OutputLevel
        {
            get { lock (Lock) { return _otputLevel; } }
            set { lock (Lock) { _otputLevel = value; } }
        }

        private static string _defaultPipeName = "IGLibServerPipe";

        /// <summary>Default pipe name.</summary>
        public static string DefaultPipeName
        { get { lock(LockGlobal) { return _defaultPipeName; } }
          set { lock(LockGlobal) { 
              if (string.IsNullOrEmpty(value))
                  throw new NullReferenceException("Default pipe name can not be empty or null string.");
              else
                  _defaultPipeName = value;
          } }
        }

        private string _pipeName = DefaultPipeName;

        public string PipeName
        {
            get { lock (_lock) { return _pipeName; } }
            set
            {
                lock (_lock)
                {
                    if (string.IsNullOrEmpty(value))
                        throw new NullReferenceException("Pipe name can not be an empty or null string.");
                    if (value != _pipeName)
                    {
                        _pipeName = value;
                        Pipe = null;
                    }
                }
            }
        }


        #endregion Data.General
        

#region Data.Operaton

        private NamedPipeServerStream _serverPipe=null;

        /// <summary>Named pipe used for communication by the server.</summary>
        public NamedPipeServerStream Pipe
        {
            get
            {
                lock (_lock)
                {
                    if (_serverPipe == null)
                        _serverPipe = new NamedPipeServerStream(PipeName, PipeDirection.InOut);
                    return _serverPipe;
                }
            }
            protected set
            {
                lock (_lock)
                {
                    if (value != _serverPipe)
                    {
                        if (_serverPipe != null)
                        {
                            _serverPipe.Close();
                        }
                        InputStream = null;
                        OutputStream = null;
                        _serverPipe = value;
                    }
                }
            }
        }

        private StreamReader _inputStream = null;

        /// <summary>Input stream of the server's named pipe.</summary>
        public StreamReader InputStream
        {
            get
            {
                lock (Lock)
                {
                    if (_inputStream == null)
                    {
                        _inputStream = new StreamReader(Pipe);
                    }
                    return _inputStream;
                }
            }
            protected set
            {
                lock (Lock)
                {
                    if (value != _inputStream)
                    {
                        if (_inputStream != null)
                        {
                            _inputStream.Close();
                        }
                        _inputStream = value;
                    }
                }
            }
        }


        private StreamWriter _outputStream = null;

        /// <summary>Output stream of the server's named pipe.</summary>
        public StreamWriter OutputStream
        {
            get
            {
                lock (Lock)
                {
                    if (_outputStream == null)
                    {
                        _outputStream = new StreamWriter(Pipe);
                    }
                    return _outputStream;
                }
            }
            protected set
            {
                lock (Lock)
                {
                    if (value != _outputStream)
                    {
                        if (_outputStream != null)
                        {
                            _outputStream.Close();
                        }
                        _outputStream = value;
                    }
                }
            }
        }

        /// <summary>Closes the Server's pipe and the associated streams.</summary>
        public void Close()
        {
            Pipe = null;
        }

        /// <summary>Closes the inpt stream.</summary>
        public void CloseInput()
        {
            InputStream = null;
        }

        /// <summary>Closes the outut stream.</summary>
        public void CloseOutput()
        {
            OutputStream = null;
        }




        private bool _stopServe = false;

        /// <summary>Whether the pipe should be closed.</summary>
        public bool StopServe
        { get { lock(_lock) { return _stopServe; } }  protected set { lock(_lock) { _stopServe = value; } }  }




        private static string _defaultStopRequest = "stop";

        /// <summary>Default stop request string - request string that will stop the server.</summary>
        public static string DefaultStopRequest
        {
            get { lock (LockGlobal) { return _defaultStopRequest; } }
            set
            {
                lock (LockGlobal)
                {
                    //if (string.IsNullOrEmpty(value))
                    //    throw new NullReferenceException("Default stop request can not be empty or null string.");
                    //else
                        _defaultStopRequest = value;
                }
            }
        }


        private string _stopRequest = DefaultStopRequest;

        public string StopRequest
        {
            get { lock (Lock) { return _stopRequest; } }
            set { _stopRequest = value; }
        }



        private static string _defaultGenericResponse = "IGLib_PipeServer_GenericResponse";

        /// <summary>Default generic answer (sent in absence of a true answer to the request).</summary>
        public static string DefaultGenericResponse
        {
            get { lock (LockGlobal) { return _defaultGenericResponse; } }
            set
            {
                lock (LockGlobal)
                {
                    if (string.IsNullOrEmpty(value))
                        throw new NullReferenceException("Default generic response can not be empty or null string.");
                    else
                        _defaultGenericResponse = value;
                }
            }
        }

        private string _genericAnswer = DefaultGenericResponse;

        public string GenericResponse
        {
            get { lock (_lock) { return _genericAnswer; } }
            set
            {
                lock (_lock)
                {
                    if (string.IsNullOrEmpty(value))
                        throw new NullReferenceException("Pipe name can not be an empty or null string.");
                    if (value != _genericAnswer)
                    {
                        _genericAnswer = value;
                        Pipe = null;
                    }
                }
            }
        }


        /// <summary>The deefault method that returns response to the specified request.
        /// <para>Just returns a string that tells which was the request string.</para></summary>
        /// <param name="request"></param>
        /// <returns></returns>
        protected static string DefaultResponseMethod(string request)
        {
            return "Request: \" " + request + "\"";
        }

        private ResponseDelegate _responseMethod = DefaultResponseMethod;

        /// <summary>Delegate that calculates response to given request.</summary>
        public ResponseDelegate ResponseMethod
        {
            get { lock (Lock) { return _responseMethod } }
            set { lock (Lock) { _responseMethod = value; } }
        }


        /// <summary>Returns response string for given request string.</summary>
        /// <param name="request">The request string.</param>
        /// <returns>Response to the request string.</returns>
        public virtual string GetResponse(string request)
        {
            if (ResponseMethod != null)
            {
                return ResponseMethod(request);
            }
            else
            {
                return GenericResponse;
            }
        }


        public string _requestString = null;

        /// <summary>The last request string that was read from the pipe.</summary>
        public string RequestString
        {
            get { lock (_lock) { return _requestString; } }
            protected set { lock (Lock) { _requestString = value; } }
        }

        public string _responseString = null;

        /// <summary>The last answer string that was written to the pipe.</summary>
        public string ResponseString
        {
            get { lock (_lock) { return _responseString; } }
            protected set { lock (Lock) { _responseString = value; } }
        }


        /// <summary>Reads the next request from the pipe.</summary>
        public virtual void ReadRequest()
        {
            lock (Lock)
            {
                RequestString = InputStream.ReadLine();
            }
        }

        /// <summary>Gets answer to the request and writes it to the pipe.</summary>
        public virtual void AnswerRequest()
        {
            lock (Lock)
            {
                ReadRequest();
                if (OutputLevel >= 2)
                {
                    Console.WriteLine(Environment.NewLine +
                        "Request: \"" + RequestString + "\"");
                }
                ResponseString = GetResponse(RequestString);
                if (OutputLevel >= 2)
                {
                    Console.WriteLine("Response: \"" + ResponseString + "\"");
                }
                OutputStream.WriteLine(ResponseString);
                if (!string.IsNullOrEmpty(StopRequest) && !string.IsNullOrEmpty(RequestString))
                {
                    if (StopRequest.ToLower() == RequestString.ToLower())
                    {
                        StopServe = true;
                        if (OutputLevel >= 1)
                        {
                            Console.WriteLine("Stop request sent, server is stopping."
                                + Environment.NewLine);
                        }
                    }
                }
            }
        }


        public virtual void Serve()
        {
            StopServe = false;
            while (!StopServe)
            {
                lock (_lock)
                {
                    ReadRequest();
                    AnswerRequest();
                }
            }
        }

        #endregion Data.Operation





    } // classs NamedPipeServerBase 



}
