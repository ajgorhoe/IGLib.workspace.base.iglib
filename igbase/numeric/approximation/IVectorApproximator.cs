using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


namespace IG.Num
{


    /// <summary>Interface for vector function approximators.</summary>
    public interface IVectorApproximator
    {

        #region Data

        /// <summary>Gets or sets the number of input parameters.</summary>
        int InputLength
        { get; set; }

        /// <summary>Gets or sets the number of output values.</summary>
        int OutputLength
        { get; set; }


        #endregion Data


        #region Calculation


        /// <summary>Calculates and returns the approximated outputs corresponding to the specified inputs,
        /// by using the current vector function approximator.</summary>
        /// <param name="input">Input parameters.</param>
        /// <returns>Vector of output values generated by the approximator.</returns>
        /// <remarks>Currently, only all outputs at once can be calculated. This makes no difference
        /// in the arrangement with a single network with multiple outputs, but does when several 
        /// networks with single output each are used. If the implementation changes in the future
        /// then performance configuratins should be taken into account carefully, and tracking input
        /// for which input parameters the outputs have been calculated might be necessary.</remarks>
        void CalculateOutput(IVector input, ref IVector output);

        /// <summary>Calculates and returns the specified output by using the current vector function approximator.</summary>
        double CalculateOutput(IVector input, int whichElement);

        /// <summary>Calculates and returns the required output values corresponding to the specified inputs,
        /// by using the current vector function approximator.</summary>
        /// <param name="input">Input parameters for which output values are calculated.</param>
        /// <param name="indices">Array of indices of the output values to be returned.</param>
        /// <param name="filteredOutput">Vector where filtered output values are stored.</param>
        void CalculateOutput(IVector input, int[] indices, ref IVector filteredOutput);


        #endregion Calculation


    }


}
